#!/usr/bin/python
__author__ = 'dandys'

import sys
from configparser import ConfigParser
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from freetype import *
from string import Template
from bitmapgen import BitmapGenerator


fontcTemplate = Template("""
/*  This file is automatically generated by fontgen.py
*/

#include <stdint.h>
#include "osdpainter.h"

static const uint8_t body[] = {
${bodysData}
};

static const uint8_t mask[] = {
${masksData}
};

const OsdFont font${fontName} = {
    .name = "${fontName}",
    .lineSpace = ${lineSpace},
    .width = ${width},
    .height = ${height},
    .bodyBuff = body,
    .maskBuff = mask,
    .rangeMin = ${rangeMin},
    .rangeMax = ${rangeMax},
};
""")

fontslistcTemplate = Template("""
/*  This file is automatically generated by fontgen.py
*/
#include <stdint.h>
#include "osdpainter.h"

${fontsDeclarationList}

const OsdFont* const osdFontsList[] = {${fontsPointerList}};
""")

class FontGeneratorError(Exception):
    def __init__(self, str):
        self.str = str

    def __str__(self):
        return self.str



class FontFreetype():
    _face = None
    def __init__(self, path, width, height):
        self.loadFont(path, width, height)

    def loadFont(self, path, width, height):
        self._face = Face(path)
        self._face.set_pixel_sizes(width, height)

    def renderChars(self, str):
        maxHeight = 0
        maxWidth = 0
        maxAdvance = 0
        maxAscender = 0
        maxDescender = 0

        # first pass just to get metrics values needed for fixed pitch grid
        for ch in str:
            self._face.load_char(ch, FT_LOAD_RENDER | FT_LOAD_TARGET_MONO)
            glyph = self._face.glyph
            maxAdvance = max(glyph.advance.x // 64, maxAdvance)
            maxAscender = max(glyph.bitmap_top, maxAscender)
            maxDescender = max(glyph.bitmap.rows - glyph.bitmap_top, maxDescender)
            maxWidth = max(glyph.bitmap.width, maxWidth)
            maxHeight = max(glyph.bitmap.rows, maxHeight)

        cellWidth = max(maxAdvance, maxWidth)
        #cellWidth = maxAdvance
        cellHeight = maxAscender + maxDescender
        #print("cellWidth = ", cellWidth)
        #print("cellHeight = ", cellHeight)

        # second pass for actual rendering
        images = []
        for ch in str:
            self._face.load_char(ch, FT_LOAD_RENDER | FT_LOAD_TARGET_MONO)
            glyph = self._face.glyph
            glyphImg = QImage(cellWidth, cellHeight, QImage.Format_MonoLSB)
            glyphImg.setColor(0, 0x00000000)
            glyphImg.setColor(1, 0xffffffff)
            glyphImg.fill(0)

            penX = (cellWidth - glyph.bitmap.width) // 2
            penY = cellHeight - (maxDescender + glyph.bitmap_top)
            buffer = glyph.bitmap.buffer
            for row in range(glyph.bitmap.rows):
                for col in range(glyph.bitmap.width):
                    bit = buffer[glyph.bitmap.pitch * row + col // 8] & (0x80 >> (col % 8))
                    if bit != 0:
                        glyphImg.setPixel(penX + col, penY + row, 1)

            images.append(glyphImg)

        return images





class FontGenerator():
    _drawTest = True
    _outputpath = ''
    def __init__(self, configPath, outputPath = '.'):
        self._outputpath = outputPath
        config = ConfigParser()
        try:
            config.read(configPath)
        except:
            print("Failed to read config file!")
            sys.exit(1)

        fontsPointerList = ""
        fontsDeclarationList = ""
        for fontName in config.sections():
            print("Generating font " + fontName + " ...   ", end="")
            fontfile = config.get(fontName, "file", fallback="")
            if fontfile == "":
                print("Font file name not found!")
                sys.exit(1)
            width = int(config.get(fontName, "width", fallback = 8))
            height = int(config.get(fontName, "height", fallback = 0))
            rangemin = int(config.get(fontName, "rangemin", fallback=32))
            rangemax = int(config.get(fontName, "rangemax", fallback=126))
            self._generateFont(fontName, fontfile, width, height, rangemin, rangemax)

            fontsPointerList += '&font' + fontName + ', '
            fontsDeclarationList += 'extern OsdFont font' + fontName + ';\n'
            print("[DONE]")

        fontsPointerList += '0'
        fontslistc = fontslistcTemplate.substitute(fontsPointerList = fontsPointerList,
                                                   fontsDeclarationList = fontsDeclarationList)

        f = open(self._outputpath  + '/fontslist.c', 'w')
        print(fontslistc, file=f)
        f.close()


    def _generateFont(self, name, fontfile, width, height = 0, rangemin = 32, rangemax = 127):
        try:
            font = FontFreetype(fontfile, width, height)
        except:
            print("Failed to load " + fontfile + "!")
            sys.exit(1)

        chars = ""
        for i in range(rangemin, rangemax):
            chars += chr(i)

        (bodys, masks, composites) = zip(*self._generateFontImages(font, chars))

        if self._drawTest:
            cells = bodys
            width = cells[0].width()
            height = cells[0].height()
            testImg = QImage(len(cells) * width, height, QImage.Format_ARGB32)
            testImg.fill(Qt.black)
            testPainter = QPainter(testImg)
            penx = 0
            for cell in cells:
                testPainter.drawImage(penx, 0, cell)
                penx += cell.width()
            testPainter.end()
            testImg.save(self._outputpath + "/test_" + name + ".png")


        bodysData = ""
        masksData = ""
        for ch, body, mask in zip(chars, bodys, masks):
            comment = ord(ch)
            if (comment <= 126) and (comment >= 32): comment = str(ch)
            comment += ' character'
            bodysData += BitmapGenerator.imageToCArray(body, comment)
            masksData += BitmapGenerator.imageToCArray(mask, comment)

        fontc = fontcTemplate.substitute(
            bodysData = bodysData,
            masksData = masksData,
            fontName = name,
            lineSpace = 1,
            width = bodys[0].width(),
            height = bodys[0].height(),
            rangeMin = rangemin,
            rangeMax = rangemax)

        f = open(self._outputpath  + '/font' + name + '.c', 'w')
        print(fontc, file=f)
        f.close()



    def _generateFontImages(self, font, chars):
        bodyImages = font.renderChars(chars)

        images = []
        for bodyImage in bodyImages:
            maskImage = BitmapGenerator.imageOutline(bodyImage)
            #maskImage.setColor(1, 0xff000000)

            compositeImage = QImage(maskImage.width(), maskImage.height(), QImage.Format_ARGB32)
            compositeImage.fill(Qt.yellow)
            compositePainter = QPainter(compositeImage)
            compositePainter.drawImage(0, 0, maskImage)
            compositePainter.drawImage(1, 1, bodyImage)
            compositePainter.end()

            images.append((bodyImage, maskImage, compositeImage))

        return images


def printhelp():
    print("Font generator for DRACO OSD v. 0.1")
    print("usage: ./fontgen.py config.ini PathToOutputDirectory/")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    if len(sys.argv) < 3:
        printhelp()
        sys.exit(1)
    FontGenerator(sys.argv[1], sys.argv[2])