#!/usr/bin/python
__author__ = 'dandys'

import sys
from configparser import ConfigParser
from string import Template
from PyQt4 import QtCore, QtGui
from PyQt4.QtGui import *
from PyQt4.QtCore import *


bitmapcTemplate = Template("""
/*  This file is automatically generated by bitmapgen.py
*/

#include <stdint.h>
#include "osdpainter.h"

static const uint8_t buff[] = {
${bitmapData}
};

static const uint8_t outlineBuff[] = {
${bitmapOutlineData}
};

const OsdBitmap bitmap${bitmapName} = {
    .name = "${bitmapName}",
    .width = ${width},
    .height = ${height},
    .buff = buff,
    .outlineBuff = ${outlineBuff},
};
""")

bitmapslistcTemplate = Template("""
/*  This file is automatically generated by bitmapgen.py
*/
#include <stdint.h>
#include "osdpainter.h"

${bitmapsDeclarationList}

const OsdBitmap* const osdBitmapsList[] = {${bitmapsPointerList}};
""")



class BitmapGenerator:
    def __init__(self, configPath, outputpath = '.'):
        config = ConfigParser()
        try:
            config.read(configPath)
        except:
            print("Failed to read config file!")
            sys.exit(1)

        bitmapsPointerList = ""
        bitmapsDeclarationList = ""
        for bitmapName in config.sections():
            print("Generating bitmap " + bitmapName + " ...   ", end="")
            bitmapfile = config.get(bitmapName, "file", fallback="")
            includeOutline = config.get(bitmapName, "outline", fallback="1")

            if bitmapfile == "":
                print("Bitmap file name not found!")
                sys.exit(1)

            img = QImage(bitmapfile)
            img = img.convertToFormat(QImage.Format_MonoLSB)
            img.setColor(0, 0x00000000)
            img.setColor(1, 0xffffffff)

            imgOutline = BitmapGenerator.imageOutline(img)
            bitmapData = BitmapGenerator.imageToCArray(img)
            bitmapOutlineData = BitmapGenerator.imageToCArray(imgOutline)
            outlineBuff = "outlineBuff"
            if includeOutline is "0":
                outlineBuff = "0"
                bitmapOutlineData = ""
            width = img.width()
            height = img.height()
            bitmapc = bitmapcTemplate.substitute(bitmapData = bitmapData,
                                                 bitmapOutlineData = bitmapOutlineData,
                                                 bitmapName = bitmapName,
                                                 width = width,
                                                 height = height,
                                                 outlineBuff = outlineBuff)

            f = open(outputpath  + '/bitmap' + bitmapName + '.c', 'w')
            print(bitmapc, file=f)
            f.close()
            bitmapsPointerList += '&bitmap' + bitmapName + ', '
            bitmapsDeclarationList += 'extern OsdBitmap bitmap' + bitmapName + ';\n'
            print("[DONE]")

        bitmapsPointerList += '0'
        bitmapslistc = bitmapslistcTemplate.substitute(bitmapsPointerList = bitmapsPointerList,
                                                       bitmapsDeclarationList = bitmapsDeclarationList)
        f = open(outputpath  + '/bitmapslist.c', 'w')
        print(bitmapslistc, file=f)
        f.close()



    def imageOutline(image):
            outlineImage = QImage(image.width() + 2, image.height() + 2, QImage.Format_MonoLSB)
            outlineImage.setColorTable(image.colorTable())
            outlineImage.fill(0)

            outlinePainter = QPainter(outlineImage)
            outlinePainter.drawImage(1, 1, image) # C
            outlinePainter.drawImage(0, 1, image) # L
            outlinePainter.drawImage(2, 1, image) # R
            outlinePainter.drawImage(1, 0, image) # U
            outlinePainter.drawImage(1, 2, image) # D
            outlinePainter.drawImage(0, 0, image) # LU
            outlinePainter.drawImage(0, 2, image) # LD
            outlinePainter.drawImage(2, 0, image) # RU
            outlinePainter.drawImage(2, 2, image) # RD
            outlinePainter.end()
            return outlineImage


    def imageToCArray(image, comment="", bytesPerLine = 25):
        image = image.convertToFormat(QImage.Format_MonoLSB)
        ctext = ""
        if comment is not "":
            ctext += "    // " + str(comment) + '\n    '
        else:
            ctext +='    '
        cnt = 0
        for line in range(image.height()):
            scan = image.constScanLine(line)
            scan.setsize(image.bytesPerLine())
            buff = memoryview(scan).tobytes()
            for b in range((image.width() - 1) // 8 + 1):
                ctext += '0x' + hex(buff[b])[2:].zfill(2) + ', '
                cnt += 1
                if (cnt % bytesPerLine) == 0:
                    ctext += '\n    '
        ctext += '\n'
        return ctext


def printhelp():
    print("Bitmap generator for DRACO OSD v. 0.1")
    print("usage: ./bitmapgen.py config.ini PathToOutputDirectory/")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    if len(sys.argv) < 3:
        printhelp()
        sys.exit(1)
    BitmapGenerator(sys.argv[1], sys.argv[2])
